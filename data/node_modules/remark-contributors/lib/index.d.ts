/**
 * Plugin to inject a given list of contributors into a table.
 *
 * @type {import('unified').Plugin<[Options?] | Array<void>, Root>}
 * @returns {(node: Root, file: VFile) => Promise<void>}
 */
export default function remarkContributors(
  options?: void | Options | undefined
): (node: Root, file: VFile) => Promise<void>
export type Root = import('mdast').Root
export type BlockContent = import('mdast').BlockContent
export type TableContent = import('mdast').TableContent
export type RowContent = import('mdast').RowContent
export type AlignType = import('mdast').AlignType
export type VFile = import('vfile').VFile
export type ContributorObject =
  import('./get-contributors-from-package.js').ContributorObject
export type Contributor =
  import('./get-contributors-from-package.js').Contributor
export type FormatterObject = import('./formatters.js').FormatterObject
export type Format = import('./formatters.js').Format
export type FormatterObjects = import('./formatters.js').FormatterObjects
export type Formatter = string | boolean | null | undefined | FormatterObject
export type Formatters = Record<string, Formatter>
/**
 * Configuration.
 */
export type Options = {
  /**
   * List of contributors to inject.
   * Defaults to the `contributors` field in the closest `package.json` upwards
   * from the processed file, if there is one.
   * Supports the string form (`name <email> (url)`) as well.
   * Fails if no contributors are found or given.
   */
  contributors?:
    | import('./get-contributors-from-package.js').Contributor[]
    | undefined
  /**
   * Alignment to use for all cells in the table.
   */
  align?: import('mdast').AlignType | undefined
  /**
   * Inject the section if there is none.
   */
  appendIfMissing?: boolean | undefined
  /**
   * Heading to look for.
   */
  heading?: string | RegExp | undefined
  /**
   * Map of fields found in `contributors` to formatters.
   * These given formatters extend the default formatters.
   *
   * The keys in `formatters` should correspond directly (case-sensitive) to
   * keys in `contributors`.
   *
   * The values can be:
   *
   * *   `null` or `undefined` — does nothing.
   * *   `false` — shortcut for `{label: key, exclude: true}`, can be used to
   * exclude default formatters.
   * *   `true` — shortcut for `{label: key}`, can be used to include default
   * formatters (like `email`)
   * *   `string` — shortcut for `{label: value}`
   * *   `Formatter` — …or a proper formatter object
   */
  formatters?: Formatters | undefined
}
